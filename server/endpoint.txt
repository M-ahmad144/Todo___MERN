**1. Frontend
UI Design
Homepage

Header: Include navigation links (Home, Login, Signup).
Todo List: Display a list of todos with filters (e.g., by status or priority).
Add Todo: Form to add a new todo item.
Todo Item: Each todo should show title, description, due date, priority, and status.
Actions: Buttons for editing, marking as completed, and deleting todos.
Footer: Optional information or links.
Authentication Pages

Login Page: Form with fields for email and password, and a submit button.
Signup Page: Form with fields for name, email, password, and password confirmation.
Responsive Design

Ensure the design works well on both desktop and mobile devices.
Frontend Technologies
React: For building the user interface with reusable components.
Redux: To manage global state, especially for authentication and todos.
React Router: For client-side routing between pages.
Axios: For making API requests to the backend.
CSS/SASS: For styling the application, or use a framework like Bootstrap/TailwindCSS.
**2. Backend
API Endpoints
User Authentication

Signup: POST /api/v1/auth/signup - Register a new user.
Login: POST /api/v1/auth/login - Authenticate and generate a JWT token.
Logout: GET /api/v1/auth/logout - Clear user session and token.
Todo Management

Get Todos: GET /api/v1/todos - Retrieve all todos for the authenticated user.
Create Todo: POST /api/v1/todos - Add a new todo item.
Update Todo: PUT /api/v1/todos/:id - Update an existing todo item.
Delete Todo: DELETE /api/v1/todos/:id - Remove a todo item.
Filter Todos: Add query parameters to filter todos by status, priority, or tags.
getCompletedTodos
toggleTodoCompletion


//input fields
Title (required)
Description (optional)
Completed (boolean, default to false)
Due Date (optional)
Priority (optional, with predefined options)
Tag (optional, if using tags)
Status (pending,overdue,today  optional, with predefined options)